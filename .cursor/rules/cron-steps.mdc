---
description: What are Motia Cron Steps and examples using Typescript, Python and Ruby
globs: 
alwaysApply: false
---
# Cron Steps Guide

Cron Steps enable scheduled task execution using cron expressions.

## Configuration

**TypeScript Example:**
```typescript
// Import necessary types from the motia library
import { CronConfig, Handlers } from 'motia'
 
// Define the configuration for the Cron Step
export const config: CronConfig = {
  // 'type' specifies the nature of the step. 'cron' as const ensures it's treated as a literal type.
  type: 'cron' as const,
  // 'name' is a unique identifier for this cron step within the system.
  name: 'PeriodicJob',
  // 'description' provides a human-readable explanation of what the cron job does.
  description: 'Runs every hour at minute 0 and emits a timestamp',
  // 'cron' is the cron expression defining the schedule. 
  // This example: '0 * * * *' means "at minute 0 of every hour of every day-of-month of every month of every day-of-week".
  // For more on cron expressions, see: https://crontab.guru/
  cron: '0 * * * *', 
  // 'emits' is an array of topic strings that this step will publish messages to when it runs.
  emits: ['cron-ticked'],
  // 'flows' is an array of flow names this step belongs to, helping to organize related steps.
  flows: ['cron-example'],
}
 
// Define the handler function that contains the logic to be executed when the cron schedule is met.
// Handlers['PeriodicJob'] links this handler to the 'PeriodicJob' configuration by its name.
export const handler: Handlers['PeriodicJob'] = async ({ emit }) => {
  // The 'emit' function is injected into the handler, allowing it to send messages to topics.
  await emit({
    // 'topic' specifies which topic to publish the message to. Must be one of the topics listed in config.emits.
    topic: 'cron-ticked',
    // 'data' is the payload of the message. It can be any JSON-serializable object.
    data: { message: 'Cron job executed successfully at ' + new Date().toISOString() },
  })
}
```

**Python Example:**
```python
# Configuration for the Cron Step as a Python dictionary
config = {
    # 'type' specifies the step type as 'cron'.
    "type": "cron",
    # 'name' is a unique identifier for this cron step.
    "name": "PeriodicJob",
    # 'description' explains what the cron job does.
    "description": "Runs every hour at minute 0 and emits a timestamp",
    # 'cron' is the cron expression for scheduling (e.g., '0 * * * *' for hourly at minute 0).
    "cron": "0 * * * *",
    # 'emits' is a list of topic strings this step will publish messages to.
    "emits": ["cron-ticked"],
    # 'flows' is a list of flow names this step belongs to.
    "flows": ["cron-example"]
}

# The handler function is an asynchronous function that executes the cron job's logic.
# 'context' is an object providing access to Motia functionalities like 'emit'.
async def handler(context):
    # The 'context.emit' method is used to send a message.
    await context.emit({
        # 'topic' specifies the topic to publish to (must be in config['emits']).
        "topic": "cron-ticked",
        # 'data' is the message payload.
        "data": { "message": "Python Cron job executed successfully at " + context.utils.dates.now().isoformat() },
    })
```

**Ruby Example:**
```ruby
# Configuration for the Cron Step as a Ruby hash, returned by a function.
def config
  {
    # :type specifies the step type as 'cron'.
    type: 'cron',
    # :name is a unique identifier for this cron step.
    name: 'PeriodicJob',
    # :description explains what the cron job does.
    description: 'Runs every hour at minute 0 and emits a timestamp',
    # :cron is the cron expression for scheduling.
    cron: '0 * * * *', # e.g., hourly at minute 0
    # :emits is an array of topic strings this step will publish messages to.
    emits: ['cron-ticked'],
    # :flows is an array of flow names this step belongs to.
    flows: ['cron-example'],
  }
end
 
# The handler function contains the logic to be executed.
# 'context' is an object providing access to Motia functionalities like 'emit'.
def handler(context)
  # The 'context.emit' method is used to send a message.
  context.emit({
    # :topic specifies the topic to publish to (must be in config[:emits]).
    topic: 'cron-ticked',
    # :data is the message payload.
    data: { message: 'Ruby Cron job executed successfully at ' + Time.now.utc.iso8601 },
  })
end
```

## Schedule Patterns

### Common Schedules
These examples show how to define different common cron schedules.

**TypeScript Examples:**
```typescript
// Example: Run a cron job every 5 minutes.
// The cron expression '*/5 * * * *' means "at every 5th minute".
export const config_every_5_minutes: CronConfig = {
  type: 'cron',
  name: 'CronJobEvery5Minutes',
  description: 'Runs every 5 minutes.',
  cron: '*/5 * * * *', // Cron expression for every 5 minutes
  emits: ['scheduled-task-5min'],
  flows: ['scheduling-examples'],
};

// Example: Run a cron job daily at midnight UTC.
// The cron expression '0 0 * * *' means "at minute 0 of hour 0 (midnight)".
export const config_daily_midnight_utc: CronConfig = {
  type: 'cron',
  name: 'CronJobDailyMidnightUTC',
  description: 'Runs daily at midnight UTC.',
  cron: '0 0 * * *',      // Cron expression for daily at midnight
  timezone: 'UTC',       // Explicitly set the timezone to UTC for clarity and consistency.
  emits: ['scheduled-task-daily'],
  flows: ['scheduling-examples'],
};
```

## State Management

Cron steps can persist state between executions. This is useful for tasks that need to remember information from their last run, like a timestamp or a counter.

**TypeScript State Management Example:**
```typescript
// Assume FlowContext and a specific Handler type are imported or defined elsewhere.
// import { Handler, FlowContext } from 'motia'; 

export const config_stateful_job: CronConfig = {
  type: 'cron' as const,
  name: 'StatefulCronJob',
  description: 'A cron job that maintains state between runs.',
  cron: '0 * * * *', // Runs hourly
  emits: ['stateful-job-ran'],
  flows: ['state-management-example'],
};

// The handler for the stateful cron job.
// It receives the input (if any, typically empty for cron) and the FlowContext.
// The FlowContext provides access to 'state' for managing persistent data.
export const handler_stateful_job: Handlers['StatefulCronJob'] = async (_, { state, emit }) => {
  // 'state.get' retrieves a value associated with a key.
  // This is useful for getting data from the previous run.
  const lastRun = await state.get('lastRunTime');
  
  if (lastRun) {
    console.log(`This job previously ran at: ${lastRun}`);
  } else {
    console.log('This is the first time this job is running.');
  }
  
  // 'state.set' stores a value associated with a key.
  // This data will be available in the next execution of this cron job.
  const currentTime = new Date().toISOString();
  await state.set('lastRunTime', currentTime);
  
  await emit({
    topic: 'stateful-job-ran',
    data: { lastRunTime: lastRun, currentRunTime: currentTime },
  });
};
```

**Python State Management Example:**
```python
# config_stateful_python_job = { ... similar to other Python cron configs ... }

# 'input' is the incoming data (usually none for cron). 'ctx' is the context object.
async def handler_stateful_python(input, ctx):
    # 'ctx.trace_id' can be used as a scope or part of a key if state needs to be specific to a trace.
    # For cron job instance state, usually a fixed key is sufficient.
    trace_id = ctx.trace_id 
 
    # Store state. 'ctx.state.set(scope, key, value)'
    # Here, 'cron_job_scope' is an arbitrary scope name. 'last_execution' is the key.
    # The value is a dictionary containing details of the current execution.
    current_time_iso = ctx.utils.dates.now().isoformat()
    await ctx.state.set('cron_job_scope', 'last_execution', { 
        'timestamp': current_time_iso,
        'status': 'completed'
    })
    
    # Retrieve state. 'ctx.state.get(scope, key)'
    # This would fetch the data set in a previous run.
    previous_execution = await ctx.state.get('cron_job_scope', 'last_execution') 
    if previous_execution:
        print(f"Previous execution data: {previous_execution}")
 
    # Delete specific state. 'ctx.state.delete(scope, key)'
    # Useful for cleaning up state if it's no longer needed.
    # await ctx.state.delete('cron_job_scope', 'some_other_key') 
 
    # Clear all state within a scope. 'ctx.state.clear(scope)'
    # Use with caution as it removes all keys under the given scope.
    # await ctx.state.clear('cron_job_scope')

    await ctx.emit({
        "topic": "python-stateful-job-ran",
        "data": { "message": f"Python stateful cron job ran at {current_time_iso}", "previous_run": previous_execution }
    })
```

**Ruby State Management Example:**
```ruby
# def config_stateful_ruby_job ... end

# 'input' is the incoming data. 'context' is the context object.
def handler_stateful_ruby(input, context)
  # 'context.trace_id' can be used for scoping if needed.
  trace_id = context.trace_id
 
  # Store state. context.state.set(scope, key, value)
  # 'cron_job_scope' is an arbitrary scope name. 'last_execution_details' is the key.
  current_time_iso = Time.now.utc.iso8601
  context.state.set('cron_job_scope', 'last_execution_details', { 
    timestamp: current_time_iso,
    status: 'processed'
  })
 
  # Retrieve state. context.state.get(scope, key)
  last_run_details = context.state.get('cron_job_scope', 'last_execution_details')
  puts "Last run details: #{last_run_details.inspect}" if last_run_details
 
  # Delete specific state. context.state.delete(scope, key)
  # context.state.delete('cron_job_scope', 'some_old_key')
 
  # Clear all state within a scope. context.state.clear(scope)
  # context.state.clear('cron_job_scope')

  context.emit({
    topic: 'ruby-stateful-job-ran',
    data: { message: "Ruby stateful cron job ran at #{current_time_iso}", previous_run: last_run_details }
  })
end
```
