---
description: 
globs: 
alwaysApply: false
---
---
description: Basic Motia workflow patterns and project structure
globs: []
alwaysApply: true
---
# Motia Framework Basics

Motia is a framework designed to help you build robust, event-driven workflows. It achieves this by breaking down complex processes into smaller, manageable, and interconnected **steps** that communicate through named channels called **topics**.

## Core Concepts

-   **Steps**: These are the fundamental building blocks of any Motia workflow. Each step encapsulates a specific piece of business logic or functionality.
    -   **API Steps**: Define HTTP endpoints (e.g., `/users`, `/orders`) that can act as entry points to your workflows, typically triggered by external clients or services.
    -   **Event Steps**: The workhorses of Motia. They subscribe to events on specific topics, process the event data, and can emit new events to other topics, thereby propagating the workflow.
    -   **Cron Steps**: Enable scheduled task execution based on cron expressions, suitable for recurring jobs like nightly reports or data synchronization.
    -   **NOOP Steps** (No Operation): These steps don't execute custom logic but are invaluable for structuring workflows, testing connections, creating manual trigger points, or acting as placeholders.

-   **Topics**: Named channels (like message queues or event streams) that facilitate communication *between* steps. A step can emit an event to a topic, and other steps can subscribe to that topic to receive and process those events. This decouples steps from each other.

-   **Flows**: A logical grouping of related steps that together achieve a larger business process or workflow. Associating steps with flows helps in organizing, visualizing, and managing complex systems.

## Basic Workflow Pattern

A common pattern involves an API Step initiating a workflow, followed by one or more Event Steps processing the data in sequence, and potentially a final step to conclude the process.

```
// Visual representation of a simple workflow:

// 1. External request hits an API Step.
API Step (e.g., Create Order Endpoint)
    ↓ (Emits to topic1)
  [topic1: order.created]
    ↓ (Event Step subscribes to topic1)
// 2. First Event Step processes the initial event.
Event Step (e.g., Validate Order Details)
    ↓ (Emits to topic2)
  [topic2: order.validated]
    ↓ (Another Event Step subscribes to topic2)
// 3. Second Event Step performs further processing.
Event Step (e.g., Process Payment)
    ↓ (Emits to topic3 or a completion topic)
  [topic3: order.payment.successful OR done: order.completed]
    ↓
Final Step (e.g., Send Confirmation Email or an Event Step that just logs completion)
```
This illustrates how steps are chained via topics, with each step handling a distinct part of the overall process.

## Project Structure

A typical Motia project might be structured as follows to keep step definitions organized:

```
my-motia-project/
├── steps/                     # Directory containing all your step definition files.
│   ├── 01-api-trigger.step.ts # Example: An API step that starts a workflow.
│   ├── 02-process-data.step.ts  # Example: An Event step for core business logic.
│   └── 03-send-result.step.ts   # Example: An Event step for a final action, like sending a notification.
├── package.json               # Project dependencies and scripts.
├── tsconfig.json              # TypeScript compiler configuration.
└── config.yml                 # (Optional) Motia specific configurations, e.g., for state adapters.
```
This organization helps in maintaining clarity as your project grows.

## Step Creation Guidelines

Here's a conceptual guide to creating steps for a workflow.

### 1. Start with an API Step (If workflow is externally triggered)

API steps often serve as the entry point for workflows that are initiated by external requests.

```typescript
// File: steps/01-api-trigger.step.ts

// Assuming ApiRouteConfig is imported from 'motia'
// import { ApiRouteConfig } from 'motia';

// Configuration for an API step that starts a workflow when a POST request is made to /start.
export const config: ApiRouteConfig = {
  // 'type': Specifies this is an API step.
  type: 'api',
  // 'name': A unique name for this API step (e.g., for linking with handlers, logging).
  name: 'start-main-workflow-api',
  // 'path': The URL path for this endpoint.
  path: '/start_workflow', // Changed from '/start' for clarity
  // 'method': The HTTP method this endpoint responds to.
  method: 'POST',
  // 'emits': An array of topic names this API step will publish an event to upon successful request handling.
  // This event will trigger the next step in the workflow.
  emits: ['workflow.initialization.requested'],
  // 'flows': Associates this step with one or more defined flows.
  flows: ['main-application-flow']
  // bodySchema: (Optional) Define a Zod schema here to validate the request body.
};

// The handler for this API step would process the request (req) and use context.emit() 
// to publish to 'workflow.initialization.requested', and then return an HTTP response.
// export const handler: Handlers['start-main-workflow-api'] = async (req, { emit, logger }) => { ... };
```

### 2. Add Event Steps for Business Logic

Event steps subscribe to topics emitted by previous steps (like an API step or another event step) and perform the core business logic.

```typescript
// File: steps/02-process-data.step.ts

// Assuming EventConfig is imported from 'motia'
// import { EventConfig, Handlers } from 'motia';
// import { z } from 'zod'; // For input schema definition

// Configuration for an Event step that processes data once the workflow has started.
export const config: EventConfig = {
  // 'type': Specifies this is an Event step.
  type: 'event',
  // 'name': A unique name for this Event step.
  name: 'process-workflow-initial-data',
  // 'description': (Optional) Explains what this step does.
  description: 'Processes the initial data received when a workflow is started.',
  // 'subscribes': An array of topic names this step listens to. 
  // It will be triggered by events on the 'workflow.initialization.requested' topic.
  subscribes: ['workflow.initialization.requested'],
  // 'emits': An array of topic names this step will publish to after its processing is complete.
  emits: ['data.initialization.processed'],
  // 'input': (Optional but recommended) A Zod schema to validate the data received from the subscribed topic.
  // input: z.object({ userId: z.string(), payload: z.any() }),
  // 'flows': Associates this step with one or more defined flows.
  flows: ['main-application-flow']
};

// The handler for this Event step would take the validated 'input' from the event
// and use context.emit() to publish to 'data.initialization.processed'.
// export const handler: Handlers['process-workflow-initial-data'] = async (input, { emit, logger, state }) => { ... };
```

### 3. Connect Steps with Topics

The key to Motia workflows is connecting steps through topics:
-   Each step explicitly declares which topics it `subscribes` to (to receive events).
-   Each step explicitly declares which topics it `emits` to (to send events for subsequent steps).
-   Use clear and descriptive topic names. A common convention is `entity.action[.status]`, for example:
    -   `user.created`
    -   `order.payment.processed`
    -   `notification.email.sent`
    -   `document.validation.failed`

## Best Practices

-   **Keep Steps Small and Focused**: Adhere to the Single Responsibility Principle. Each step should do one thing well.
-   **Use Clear, Descriptive Names**: Apply this to steps, topics, flows, and variables for better readability and maintainability.
-   **Always Include Steps in a Flow**: Flows help organize and visualize your workflows.
-   **Start Workflows Appropriately**: Use API steps for externally triggered workflows. Cron steps for scheduled workflows. Events for internal triggers.
-   **Isolate Heavy Logic**: Put computationally intensive or long-running tasks in Event steps. This allows them to be processed asynchronously in the background, keeping API responses fast.
-   **Consistent Topic Naming**: Adopt a clear and consistent naming convention for topics (e.g., `entity.action.status`, like `user.registration.pending`).

## Quick Development Workflow

A typical iterative process for building a Motia workflow:

1.  **Define Trigger**: Create an API step (or Cron/NOOP step) to initiate your workflow.
2.  **Add Logic Steps**: Implement Event steps to handle the core business logic, one task at a time.
3.  **Connect via Topics**: Configure `subscribes` and `emits` in each step to chain them together correctly.
4.  **Test Iteratively**: Use tools like `curl`, Postman, or the Motia Workbench to test your API endpoints. Use `motia emit` for testing event-triggered flows.
5.  **Visualize and Monitor**: View your workflow structure and monitor its execution in a browser, typically at `http://localhost:3000` when running Motia locally (port may vary).

## Testing Your Workflow

Here are some common ways to test your Motia workflows during development:

```bash
# 1. Start your Motia development server (this command might vary based on your package.json setup).
# This usually watches for file changes and reloads your steps.
pnpm run dev

# 2. Trigger an API endpoint using a tool like curl.
# This example sends an empty JSON POST request to /start_workflow (assuming this path from an API step).
# Replace with your actual path, method, and data as needed.
curl -X POST -H "Content-Type: application/json" http://localhost:3000/start_workflow -d '{}'

# 3. Emit an event directly to a topic using the Motia CLI (if available and configured).
# This is useful for testing specific event steps or parts of a flow without going through an API.
# Replace 'workflow.initialization.requested' with your target topic and '{}' with your event data.
npx motia emit --topic workflow.initialization.requested --message '{"key":"value"}'
``` 