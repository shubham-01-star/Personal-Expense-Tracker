---
description: UI Steps provide a powerful way to create custom, visually appealing representations of your workflow steps in the Workbench
globs: 
alwaysApply: false
---
# UI Steps Guide

UI Steps allow you to create custom, visually appealing representations of your workflow steps within the Motia Workbench. This is achieved by providing a React component that defines the custom rendering for a step.

## Example

The following example demonstrates a simple custom UI for an event node. You would typically place this code in a file associated with your step, and Motia's Workbench would discover and use it to render the step.

```typescript
// Import React for creating the component.
import React from 'react';
// Import EventNode and EventNodeProps from 'motia/workbench'.
// EventNode is a base component provided by Motia for rendering step nodes,
// which you can wrap or customize.
// EventNodeProps defines the properties your custom UI component will receive.
import { EventNode, type EventNodeProps } from 'motia/workbench';

/**
 * CustomStepUI is a React functional component that defines the custom UI
 * for a specific step in the Motia Workbench.
 *
 * @param props - The properties passed to the component. `EventNodeProps` includes:
 *                `data`: Contains information about the step instance, such as its
 *                        name, status, any associated data from the workflow, etc.
 *                        The exact shape of `data` might vary based on the step type
 *                        and the information Motia Workbench provides.
 *                Other props for styling and interaction might also be available.
 */
export default function CustomStepUI({ data }: EventNodeProps) {
  // The component returns JSX that defines the custom appearance.
  // Here, we're using the base EventNode and customizing its appearance
  // and adding some custom content.
  return (
    <EventNode
      // Pass through the original 'data' prop to the base EventNode.
      // This ensures that default information and interactivity are maintained.
      data={data}
      // 'variant' allows choosing predefined color schemes for the node.
      // 'white' is one such variant. Other variants might include 'blue', 'green', etc.
      variant="white"
      // 'shape' defines the border style of the node, e.g., 'rounded', 'square'.
      shape="rounded"
      // 'className' allows adding custom CSS classes for further styling.
      // Here, Tailwind CSS utility classes are used for padding.
      // Example: Added a blue border for more visual distinction.
      className="py-2 px-4 border-blue-500 border-2"
    >
      {/* This is where you can inject your custom content inside the node. */}
      {/* You can use the `data` prop to display dynamic information from the step. */}
      <div>
        <strong>Custom Step Name:</strong> {data.label || data.name /* Display step label or name from props */}
      </div>
      <div style={{ marginTop: '4px', fontSize: '0.85em', color: '#333' }}>
        Status: {data.status || 'N/A'} {/* Display step status if available */}
      </div>
      {/* 
        You can add more complex React components, icons, or interactive elements here.
        For example, if data.customPayload (specific data you attach to your step for UI purposes) exists:
        {data.customPayload && 
          <div className="mt-1 p-1 bg-blue-50 rounded text-sm">
            Details: {JSON.stringify(data.customPayload)}
          </div>
        }
      */}
      <div className="mt-2 p-2 bg-gray-100 rounded text-center text-sm">
         Custom UI Content
      </div>
    </EventNode>
  );
}

// How Motia discovers this custom UI:
// Typically, you might name this file similarly to your step definition file,
// perhaps with a `.ui.tsx` extension (e.g., `my-processing-step.ui.tsx` if your
// step definition is `my-processing-step.step.ts`). Motia's Workbench would then
// have a mechanism to look for such associated UI component files.
// The exact discovery mechanism depends on Motia's specific conventions and project setup.
```
This example shows:
-   Importing necessary components and types from `motia/workbench`.
-   Defining a React functional component that receives `EventNodeProps` (which includes `data` about the step).
-   Using the base `EventNode` component for common node features and then customizing its appearance via props like `variant`, `shape`, and `className`.
-   Adding custom JSX content within the node, potentially using information from the `data` prop to make it dynamic.

By creating such components, you can significantly enhance the visual representation and information density of your steps in the workflow visualization tool, making complex workflows easier to understand and debug. 
