---
description: How to add step and flow tests
globs: 
alwaysApply: false
---
# Motia Testing Guide

This guide explains how to set up and write tests for your Motia steps (Event Steps, API Steps, etc.) using Jest and the `@motiadev/test` utility.

## Setup

First, ensure you have the necessary development dependencies installed in your project:
```bash
# Installs @motiadev/test for Motia-specific testing utilities,
# Jest as the testing framework,
# and @types/jest for TypeScript type definitions for Jest.
pnpm add -D @motiadev/test jest @types/jest
```
_You might also need to configure Jest in your `package.json` (e.g., by adding a `jest` section or a `test` script like `"test": "jest"`) or a dedicated `jest.config.js` file to specify test file patterns, transformations (e.g., using `ts-jest` for TypeScript), etc._

## Core Testing Patterns

The `@motiadev/test` package provides `createMockContext`, a crucial utility that generates a mock version of the Motia execution context (`{ emit, state, logger, ... }`). This allows you to test your step handlers in isolation without needing a full Motia environment.

### 1. Testing Event Steps

Event steps are typically asynchronous functions that receive an input payload and a context object. They perform some logic, potentially interact with state, and may emit new events.

```typescript
// Import createMockContext from the Motia testing library.
import { createMockContext } from '@motiadev/test';
// Import the handler function of the event step you are testing.
// Replace './your-event-step-module' and 'handler' with your actual file path and handler export.
// e.g., import { handler as processDataHandler } from '../steps/02-process-data.step';

// ---- Example Event Step Handler (for context) ----
// This is an example of what your actual event step handler might look like.
// You would import your actual handler in your test file.
/* 
import { EventContext } from 'motia'; // Assuming EventContext is your type for the context object

interface MyEventInput {
  message: string;
  count?: number;
}

export const exampleEventHandler = async (input: MyEventInput, { emit, state, logger }: EventContext) => {
  if (!input.message) {
    logger.warn('Input message is empty, skipping processing.');
    return; // Or throw an error, depending on desired behavior
  }
  const processedMessage = input.message.toUpperCase();
  const newCount = (input.count || 0) + 1;

  await state.set('lastProcessedMessage', processedMessage);
  await state.set('currentCount', newCount);

  await emit({
    topic: 'data.processed',
    data: { result: processedMessage, count: newCount }
  });
  logger.info('Event data processed and new event emitted.', { processedMessage, newCount });
};
*/
// ---- End of Example Event Step Handler ----

// Use `describe` to group tests for a specific Event Step.
 describe('ProcessDataEventStep', () => {
  // Use `it` or `test` to define individual test cases with descriptive names.
  it('should process valid input data, emit a new event, and update state correctly', async () => {
    // Arrange: Set up your test.
    // createMockContext() provides Jest mock functions for 'emit', 'state', 'logger'.
    const { emit, state, logger } = createMockContext();
    
    // Define the input payload for your event step handler.
    const inputPayload = { message: 'hello motia' }; // Assuming this matches your handler's expected input type.
    
    // Act: Execute the handler function with the input and mock context.
    // Replace `exampleEventHandler` with your actual imported handler.
    await exampleEventHandler(inputPayload, { emit, state, logger, /* include other context properties if your handler uses them */ });
    
    // Assert: Verify the outcomes.
    // Check if `emit` was called with the expected topic and data.
    expect(emit).toHaveBeenCalledWith({
      topic: 'data.processed',
      data: { result: 'HELLO MOTIA', count: 1 } // Based on exampleEventHandler logic
    });

    // Check if `state.set` was called with the expected key-value pairs.
    expect(state.set).toHaveBeenCalledWith('lastProcessedMessage', 'HELLO MOTIA');
    expect(state.set).toHaveBeenCalledWith('currentCount', 1);

    // Verify logger calls if important for your test case.
    expect(logger.info).toHaveBeenCalledWith('Event data processed and new event emitted.', { processedMessage: 'HELLO MOTIA', count: 1 });

    // Optionally, check how many times functions were called.
    expect(emit).toHaveBeenCalledTimes(1);
    expect(state.set).toHaveBeenCalledTimes(2); // Called for lastProcessedMessage and currentCount
  });

  it('should handle empty messages gracefully by logging a warning', async () => {
    const { emit, state, logger } = createMockContext();
    const inputPayloadWithEmptyMessage = { message: '' }; 

    await exampleEventHandler(inputPayloadWithEmptyMessage, { emit, state, logger });

    // Assert that a warning was logged.
    expect(logger.warn).toHaveBeenCalledWith('Input message is empty, skipping processing.');
    // Assert that emit and state.set were not called in this case.
    expect(emit).not.toHaveBeenCalled();
    expect(state.set).not.toHaveBeenCalled();
  });
});
```

### 2. Testing API Steps

API steps handle incoming HTTP requests. Tests should simulate these requests and verify the HTTP response (status code, body) and any side effects like event emissions or state changes.

```typescript
// Import createMockContext.
import { createMockContext } from '@motiadev/test';
// Import the handler for the API step you are testing.
// Replace './your-api-step-module' and 'handler' with your actual file path and handler export.
// e.g., import { handler as createUserApiHandler } from '../steps/01-create-user.api';

// ---- Example API Step Handler (for context) ----
/*
import { ApiContext, ApiRequest } from 'motia'; // Assuming these types from your Motia setup

interface CreateUserInput {
  username: string;
  email: string;
}

export const exampleApiHandler = async (req: ApiRequest<CreateUserInput>, { emit, logger, state }: ApiContext) => {
  if (req.method !== 'POST') {
    return { status: 405, body: { error: 'Method Not Allowed' } };
  }
  // Assume bodySchema validation is handled by Motia before this handler is called for valid requests.
  // For direct handler testing, you might need to mock or bypass this if testing invalid schema cases.
  const { username, email } = req.body;

  if (!username || !email) {
    logger.warn('Missing username or email in API request');
    return { status: 400, body: { error: 'Username and email are required.' } };
  }

  const userId = `user_${Date.now()}`;
  await state.set(`user_${userId}_details`, { username, email, id: userId });

  await emit({
    topic: 'user.created',
    data: { id: userId, username, email }
  });

  logger.info('User created via API', { userId, username });
  return { status: 201, body: { message: 'User created successfully', userId } };
};
*/
// ---- End of Example API Step Handler ----

// Group tests for a specific API endpoint.
describe('UserCreationAPIEndpoint', () => {
  it('should handle valid POST requests, create a user, emit event, and return 201 status', async () => {
    // Arrange
    const { emit, logger, state } = createMockContext();
    
    // Simulate an incoming HTTP request object.
    // The structure should match what your API handler expects (e.g., ApiRequest<RequestBodyType>).
    const mockRequest = {
      method: 'POST', // HTTP method
      body: { username: 'testuser', email: 'test@example.com' }, // Request body
      pathParams: {}, // Mock path parameters if your API uses them (e.g., /users/:id)
      queryParams: {}, // Mock query parameters if your API uses them (e.g., /users?active=true)
      headers: { 'content-type': 'application/json' } // Mock headers if relevant
    };

    // Act: Call the API handler.
    // Replace `exampleApiHandler` with your actual imported handler.
    const response = await exampleApiHandler(mockRequest, { emit, logger, state, /* other context props */ });
    
    // Assert: Verify the response and side effects.
    // Check the HTTP status code.
    expect(response.status).toBe(201);
    // Check the response body.
    expect(response.body.message).toBe('User created successfully');
    expect(response.body.userId).toBeDefined(); // Check if userId is part of the response

    // Check if an event was emitted with correct data.
    expect(emit).toHaveBeenCalledWith(expect.objectContaining({
      topic: 'user.created',
      data: expect.objectContaining({ username: 'testuser', email: 'test@example.com' })
    }));

    // Check state interaction.
    expect(state.set).toHaveBeenCalledWith(expect.stringContaining(`user_${response.body.userId}_details`), 
      expect.objectContaining({ username: 'testuser', email: 'test@example.com' })
    );

    // Check logger calls.
    expect(logger.info).toHaveBeenCalledWith('User created via API', expect.objectContaining({ username: 'testuser' }));
  });

  it('should return 400 if required fields are missing in POST request', async () => {
    const { emit, logger, state } = createMockContext();
    const mockInvalidRequest = {
      method: 'POST',
      body: { username: 'onlyuser' }, // Missing email
      pathParams: {}, queryParams: {}, headers: {}
    };

    const response = await exampleApiHandler(mockInvalidRequest, { emit, logger, state });

    expect(response.status).toBe(400);
    expect(response.body.error).toBe('Username and email are required.');
    expect(emit).not.toHaveBeenCalled(); // No event should be emitted on validation failure
  });

  it('should return 405 for non-POST requests', async () => {
    const { emit, logger, state } = createMockContext();
    const mockGetRequest = {
      method: 'GET', // Incorrect method
      body: { username: 'testuser', email: 'test@example.com' },
      pathParams: {}, queryParams: {}, headers: {}
    };

    const response = await exampleApiHandler(mockGetRequest, { emit, logger, state });

    expect(response.status).toBe(405);
    expect(response.body.error).toBe('Method Not Allowed');
  });
});
```

## Best Practices

1.  **Test Structure**:
    *   **Group related tests**: Use `describe` to logically group tests for a single step or a specific piece of functionality (e.g., `describe('UserAuthenticationStep', () => { ... });`).
    *   **Descriptive test names**: Use `it` (or `test`) with clear, concise descriptions of what each test case verifies (e.g., `it('should return a 401 error for invalid credentials', () => { ... });`).
    *   **Test happy paths and error cases**: Ensure you test both successful execution scenarios with valid inputs and various error conditions (e.g., invalid input, missing data, failures in dependencies, unexpected exceptions).
    *   **Mock external services**: If your step interacts with external services (databases, third-party APIs), mock these dependencies. Jest's `jest.mock('./path/to/module')` is excellent for this. This isolates your step's logic and makes tests faster and more reliable.
    *   **Test state management**: If your step reads from or writes to Motia's state, explicitly test these interactions using the mock `state` object from `createMockContext`.

2.  **Common Patterns in Motia Testing**:

```typescript
import { createMockContext } from '@motiadev/test';
// Assume 'handlerThatMightError' and 'handlerThatUsesState' are imported from your step files.

// ---- Example Handlers for Best Practices (for context) ----
/*
export const handlerThatMightError = async (input, { logger, emit, state }) => {
  if (!input || !input.criticalData) {
    logger.error('Critical data missing from input', { inputReceived: input });
    await emit({ topic: 'processing.error', data: { error: 'MissingCriticalData' } });
    throw new Error('Missing critical data');
  }
  // ... further processing ...
  logger.info('Processed successfully with critical data.');
};

export const handlerThatUsesState = async (input, { state, logger }) => {
  const currentCounter = await state.get<number>('executionCounter') || 0;
  const newCounter = currentCounter + 1;
  await state.set('executionCounter', newCounter);
  logger.info(`Handler executed. Counter is now ${newCounter}`);
  return newCounter;
};
*/
// ---- End of Example Handlers ----

describe('AdvancedStepTestingScenarios', () => {
  // Example: Testing error handling and logger interaction more deeply.
  it('should log an error and emit an error event when critical data is missing', async () => {
    const { emit, logger, state } = createMockContext(); // Include state for completeness if handler uses it.
    
    // Test that the handler throws an error as expected.
    // Using try-catch or expect(...).rejects.toThrow() for error assertion.
    await expect(handlerThatMightError({ someOtherData: 'present' }, { emit, logger, state }))
      .rejects.toThrow('Missing critical data');
    
    // Assert that logger.error was called with specific context.
    expect(logger.error).toHaveBeenCalledWith('Critical data missing from input', { inputReceived: { someOtherData: 'present' } });
    
    // Assert that an error event was emitted.
    expect(emit).toHaveBeenCalledWith({ topic: 'processing.error', data: { error: 'MissingCriticalData' } });
  });

  // Example: Testing state management interactions.
  it('should increment and store a counter in state correctly across calls (simulated)', async () => {
    const { state, logger, emit } = createMockContext(); // emit for context completeness

    // First call to the handler (or direct state manipulation for simpler mock setup)
    // await handlerThatUsesState({ someInput: 1 }, { state, logger, emit });
    // For this example, let's directly manipulate and check mock state for clarity:
    let counter = await handlerThatUsesState(null, { state, logger, emit });
    expect(counter).toBe(1);
    expect(state.set).toHaveBeenCalledWith('executionCounter', 1);
    expect(logger.info).toHaveBeenCalledWith('Handler executed. Counter is now 1');

    // Simulate a second call by invoking the handler again with the SAME mock context.
    // The mock state will persist between these calls within this single test case.
    counter = await handlerThatUsesState(null, { state, logger, emit });
    expect(counter).toBe(2);
    expect(state.set).toHaveBeenCalledWith('executionCounter', 2); // Verifies the latest call
    expect(logger.info).toHaveBeenCalledWith('Handler executed. Counter is now 2');
    
    // Verify the final value in state directly.
    const finalCounterInState = await state.get('executionCounter');
    expect(finalCounterInState).toBe(2);
  });
});
```

## Running Tests

Use your package manager's test script (usually `pnpm test`, `npm test`, or `yarn test`), which should be configured to execute Jest:

```bash
# Run all tests (typically looks for *.test.ts, *.spec.ts, or files in __tests__ folders).
pnpm test

# Run tests in watch mode. Jest will monitor file changes and re-run tests automatically.
pnpm test --watch

# Run tests and generate a code coverage report (often configured in jest.config.js).
pnpm test --coverage
```_Ensure your `package.json` has a `scripts` entry like: `"test": "jest"` or `"test": "jest --config jest.config.js"`._ 
