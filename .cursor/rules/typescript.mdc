---
description: Motia Typescript Types
globs: 
alwaysApply: false
---
```typescript
type FlowContext = {
    emit: Emitter;
    traceId: string;
    state: InternalStateManager;
    logger: Logger;
};
type Emit = string | {
    topic: string;
    label?: string;
    conditional?: boolean;
};
type EventConfig<TInput extends ZodObject<any> = any> = {
    type: 'event';
    name: string;
    description?: string;
    subscribes: string[];
    emits: Emit[];
    virtualEmits?: Emit[];
    input: TInput;
    flows?: string[];
    /**
     * Files to include in the step bundle.
     * Needs to be relative to the step file.
     */
    includeFiles?: string[];
};
type NoopConfig = {
    type: 'noop';
    name: string;
    description?: string;
    virtualEmits: Emit[];
    virtualSubscribes: string[];
    flows?: string[];
};
type ApiRouteMethod = 'GET' | 'POST' | 'PUT' | 'DELETE' | 'PATCH' | 'OPTIONS' | 'HEAD';
type ApiMiddleware = (req: ApiRequest, ctx: FlowContext, next: () => Promise<ApiResponse>) => Promise<ApiResponse>;
type ApiRouteConfig = {
    type: 'api';
    name: string;
    description?: string;
    path: string;
    method: ApiRouteMethod;
    emits: Emit[];
    virtualEmits?: Emit[];
    virtualSubscribes?: string[];
    flows?: string[];
    middleware?: ApiMiddleware[];
    bodySchema?: ZodObject<any>;
    /**
     * Files to include in the step bundle.
     * Needs to be relative to the step file.
     */
    includeFiles?: string[];
};
type ApiRequest = {
    pathParams: Record<string, string>;
    queryParams: Record<string, string | string[]>;
    body: Record<string, any>;
    headers: Record<string, string | string[]>;
    files?: UploadedFile[] | {
        [fieldname: string]: UploadedFile[];
     };
};
type ApiResponse = {
    status: number;
    headers?: Record<string, string>;
    body: string | Buffer | Record<string, any>;
};
type ApiRouteHandler = (req: ApiRequest, ctx: FlowContext) => Promise<ApiResponse>;
type CronConfig = {
    type: 'cron';
    name: string;
    description?: string;
    cron: string;
    virtualEmits?: Emit[];
    emits: Emit[];
    flows?: string[];
    /**
     * Files to include in the step bundle.
     * Needs to be relative to the step file.
     */
    includeFiles?: string[];
};
type CronHandler = (ctx: FlowContext) => Promise<void>;
type StepHandler<T> = T extends EventConfig<any> ? EventHandler<T['input']> : T extends ApiRouteConfig ? ApiRouteHandler : T extends CronConfig ? CronHandler : never;
type Event<TData = unknown> = {
    topic: string;
    data: TData;
    traceId: string;
    flows?: string[];
    logger: BaseLogger;
};
type Handler<TData = unknown> = (event: Event<TData>) => Promise<void>;
type SubscribeConfig<TData> = {
    event: string;
    handlerName: string;
    filePath: string;
    handler: Handler<TData>;
};
type UnsubscribeConfig = {
    filePath: string;
    event: string;
};
type StepConfig = EventConfig<ZodObject<any>> | NoopConfig | ApiRouteConfig | CronConfig;
type Step<TConfig extends StepConfig = StepConfig> = {
    filePath: string;
    version: string;
    config: TConfig;
};
```

// This file outlines core TypeScript type definitions used within the Motia framework.
// These types help ensure code quality, provide autocompletion, and define the contracts
// for step configurations, handlers, and the execution context.

// --- Core Execution Context ---

/**
 * FlowContext is provided to step handlers and contains utilities for interacting
 * with the Motia environment during the execution of a flow instance.
 */
type FlowContext = {
    /** Function to emit events to topics. */
    emit: Emitter;
    /** A unique identifier for the current flow instance, used for state isolation and tracing. */
    traceId: string;
    /** Manages state persistence and retrieval scoped to the current traceId. */
    state: InternalStateManager;
    /** Logger instance for structured logging within the step. */
    logger: Logger;
};

// --- Event Emission ---

/**
 * Defines the structure for emitting events. Can be a simple topic string
 * or an object with more options.
 */
type Emit = string | {
    /** The topic name to emit to. */
    topic: string;
    /** An optional label for the emission, could be used for documentation or UI. */
    label?: string;
    /** If true, this emission might be conditional and not always occur. */
    conditional?: boolean;
};

// --- Step Configuration Types ---

/**
 * Configuration for an Event Step.
 * Event steps subscribe to topics and process incoming event data.
 * @template TInput - A Zod schema defining the expected shape of the input event data.
 */
type EventConfig<TInput extends ZodObject<any> = any> = {
    /** Specifies the step type. Must be 'event'. */
    type: 'event';
    /** A unique name for this event step. */
    name: string;
    /** Optional human-readable description of the step's purpose. */
    description?: string;
    /** An array of topic names this step subscribes to. */
    subscribes: string[];
    /** An array of topics this step can emit events to. See `Emit` type. */
    emits: Emit[];
    /** Optional: Topics that are virtually emitted, perhaps for documentation or lineage, but not strictly required for execution. */
    virtualEmits?: Emit[];
    /** The Zod schema for validating the input data of events this step processes. */
    input: TInput;
    /** Optional: An array of flow names this step belongs to. */
    flows?: string[];
    /**
     * Optional: Specifies an array of file paths (relative to the step file)
     * to be included in the step's bundle. Useful for including templates,
     * static assets, or other necessary files alongside the step code.
     */
    includeFiles?: string[];
};

/**
 * Configuration for a NOOP (No Operation) Step.
 * NOOP steps are primarily used for connecting parts of a workflow,
 * potentially for virtual event fan-out/fan-in or for documentation purposes,
 * without executing custom business logic.
 */
type NoopConfig = {
    /** Specifies the step type. Must be 'noop'. */
    type: 'noop';
    /** A unique name for this NOOP step. */
    name: string;
    /** Optional human-readable description. */
    description?: string;
    /** Topics this NOOP step virtually emits to (for lineage/documentation). */
    virtualEmits: Emit[];
    /** Topics this NOOP step virtually subscribes to. */
    virtualSubscribes: string[];
    /** Optional: An array of flow names this step belongs to. */
    flows?: string[];
};

/**
 * Defines the allowed HTTP methods for an API Route.
 */
type ApiRouteMethod = 'GET' | 'POST' | 'PUT' | 'DELETE' | 'PATCH' | 'OPTIONS' | 'HEAD';

/**
 * Defines the signature for API middleware functions.
 * Middleware can intercept requests before they reach the main handler.
 */
type ApiMiddleware = (req: ApiRequest, ctx: FlowContext, next: () => Promise<ApiResponse>) => Promise<ApiResponse>;

/**
 * Configuration for an API Step.
 * API steps define HTTP endpoints that can trigger workflows.
 */
type ApiRouteConfig = {
    /** Specifies the step type. Must be 'api'. */
    type: 'api';
    /** A unique name for this API step. */
    name: string;
    /** Optional human-readable description. */
    description?: string;
    /** The URL path for this API endpoint (e.g., '/users/:id'). */
    path: string;
    /** The HTTP method for this route. */
    method: ApiRouteMethod;
    /** Topics this API step can emit events to. */
    emits: Emit[];
    /** Optional: Virtually emitted topics. */
    virtualEmits?: Emit[];
    /** Optional: Virtually subscribed topics (less common for API steps). */
    virtualSubscribes?: string[];
    /** Optional: An array of flow names this step belongs to. */
    flows?: string[];
    /** Optional: An array of middleware functions to be executed before the main handler. */
    middleware?: ApiMiddleware[];
    /** Optional: A Zod schema to validate the request body. */
    bodySchema?: ZodObject<any>;
    /** Optional: Files to include in the step bundle, relative to the step file. */
    includeFiles?: string[];
};

/**
 * Represents an incoming HTTP request to an API Step.
 */
type ApiRequest = {
    /** Key-value pairs of path parameters (e.g., from '/users/:id'). */
    pathParams: Record<string, string>;
    /** Key-value pairs of query string parameters. Values can be string or array of strings. */
    queryParams: Record<string, string | string[]>;
    /** The parsed request body (typically an object if JSON, but can vary). */
    body: Record<string, any>; // Consider a more specific type if possible, or allow TBody generic
    /** Key-value pairs of request headers. Values can be string or array of strings. */
    headers: Record<string, string | string[]>;
    /**
     * Optional: Uploaded files, typically populated by middleware like multer.
     * The structure can be an array of files or an object mapping fieldnames to arrays of files.
     */
    files?: Express.Multer.File[] | {
        [fieldname: string]: Express.Multer.File[];
    };
};

/**
 * Represents the HTTP response to be sent from an API Step.
 */
type ApiResponse = {
    /** The HTTP status code (e.g., 200, 201, 400, 500). */
    status: number;
    /** Optional: Key-value pairs for response headers. */
    headers?: Record<string, string>;
    /** The response body. Can be a string, Buffer (for binary data), or a JSON object. */
    body: string | Buffer | Record<string, any>;
};

/**
 * Signature for an API Step's main request handler function.
 */
type ApiRouteHandler = (req: ApiRequest, ctx: FlowContext) => Promise<ApiResponse>;

/**
 * Configuration for a Cron Step.
 * Cron steps execute on a defined schedule.
 */
type CronConfig = {
    /** Specifies the step type. Must be 'cron'. */
    type: 'cron';
    /** A unique name for this cron step. */
    name: string;
    /** Optional human-readable description. */
    description?: string;
    /** The cron expression defining the schedule (e.g., '0 * * * *' for hourly). */
    cron: string;
    /** Optional: Virtually emitted topics. */
    virtualEmits?: Emit[];
    /** Topics this cron step can emit events to. */
    emits: Emit[];
    /** Optional: An array of flow names this step belongs to. */
    flows?: string[];
    /** Optional: Files to include in the step bundle, relative to the step file. */
    includeFiles?: string[];
};

/**
 * Signature for a Cron Step's handler function.
 * It receives the FlowContext and typically performs a scheduled task.
 */
type CronHandler = (ctx: FlowContext) => Promise<void>; // Input payload is usually not applicable for cron jobs triggered by time.

// --- Generic Step and Handler Types ---

/**
 * A utility type that infers the correct handler signature based on the Step's configuration type.
 * This enables type safety when defining handlers for different step types.
 * @template T - The specific step configuration type (e.g., EventConfig, ApiRouteConfig).
 */
type StepHandler<T> = T extends EventConfig<any>
    ? EventHandler<T['input']> // Infers EventHandler with the Zod input schema
    : T extends ApiRouteConfig
    ? ApiRouteHandler
    : T extends CronConfig
    ? CronHandler
    : never; // Should not happen if T is a valid StepConfig

/**
 * Represents an event object as received by an Event Step's handler.
 * @template TData - The type of the event's data payload.
 */
type Event<TData = unknown> = {
    /** The topic the event was published on. */
    topic: string;
    /** The actual data payload of the event. */
    data: TData;
    /** The traceId of the flow instance this event belongs to. */
    traceId: string;
    /** Optional: Flows this event is associated with. */
    flows?: string[];
    /** Logger instance associated with this event's processing. */
    logger: BaseLogger; // Assuming BaseLogger is a defined type for logging.
};
/**
 * Generic signature for an Event Step's handler function.
 * (Note: The `StepHandler` utility type is often more specific and preferred).
 * @template TData - The expected type of the incoming event's data.
 */
// type Handler<TData = unknown> = (event: Event<TData>) => Promise<void>;
// The type below is more consistent with how EventConfig uses TInput for Zod schema
/**
 * Defines the structure of an event handler function.
 * @template TInputSchema - A ZodObject schema that defines the expected shape of the input event data.
 *                          The handler will receive the inferred type from this schema as its first argument.
 */
type EventHandler<TInputSchema extends ZodObject<any> = any> =
    (input: z.infer<TInputSchema>, context: FlowContext) => Promise<void>;


/**
 * Configuration for subscribing to an event (likely for internal framework use or advanced scenarios).
 * @template TData - The type of data expected for the subscribed event.
 */
type SubscribeConfig<TData> = {
     /** The event topic to subscribe to. */
     event: string;
     /** The name of the handler function. */
     handlerName: string;
     /** The file path where the handler is defined. */
     filePath: string;
     /** The actual handler function. */
    handler: (event: Event<TData>) => Promise<void>;
 };

/**
 * Configuration for unsubscribing from an event.
 */
type UnsubscribeConfig = {
    /** The file path associated with the subscription. */
    filePath: string;
    /** The event topic to unsubscribe from. */
    event: string;
};

/**
 * A union type representing all possible step configurations.
 * This is useful for functions or types that need to operate on any kind of step config.
 */
type StepConfig = EventConfig<ZodObject<any>> | NoopConfig | ApiRouteConfig | CronConfig;

/**
 * Represents a generic Motia Step, including its file path, version, and configuration.
 * @template TConfig - The specific configuration type for this step.
 */
type Step<TConfig extends StepConfig = StepConfig> = {
    /** The absolute or relative file path to the step definition file. */
    filePath: string;
    /** A version string for the step, potentially for caching or migration. */
    version: string;
    /** The configuration object for the step. */
    config: TConfig;
};

// Note: Types like Emitter, InternalStateManager, Logger, BaseLogger, ZodObject, z.infer and Express.Multer.File
// are assumed to be defined elsewhere or imported from their respective libraries (e.g., Zod, Express).
// Ensure Zod (`z`) is imported if using `z.infer` directly in consuming code. 
