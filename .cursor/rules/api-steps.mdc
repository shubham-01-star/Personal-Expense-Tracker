---
<<<<<<< HEAD
description: How to create basic API Steps in Motia
=======
description: What are Motia API Steps and a Typescript example
globs: 
alwaysApply: false
---
# API Steps Guide

API Steps expose HTTP endpoints that can trigger workflows and emit events.

## Basic API Step Pattern
```typescript
// Import necessary types and libraries
import { ApiRouteConfig, Handlers } from 'motia'; // Core Motia types for API steps
import { z } from 'zod'; // Zod library for data validation

// Define the configuration for the API Step
export const config: ApiRouteConfig = {
  // 'type' specifies the step as an API endpoint.
  type: 'api',
  // 'name' is a unique identifier for this API step, used internally and for linking handlers.
  name: 'create-user',
  // 'path' defines the URL path for this endpoint (e.g., http://localhost:3000/users).
  path: '/users',
  // 'method' specifies the HTTP method (e.g., GET, POST, PUT, DELETE).
  method: 'POST',
  // 'emits' is an array of topic strings that this step will publish messages to upon successful execution.
  emits: ['user.created'],
  // 'flows' associates this step with one or more defined workflows.
  flows: ['user-management'],
  // 'bodySchema' defines the expected structure and validation rules for the request body using Zod.
  // This ensures that incoming data matches the expected format before the handler is invoked.
  bodySchema: z.object({
    name: z.string().min(1, "Name cannot be empty"), // Expect a 'name' property of type string, non-empty.
    email: z.string().email("Invalid email format") // Expect an 'email' property that is a valid email string.
  })
};

// Define the handler function that contains the logic for this API endpoint.
// Handlers['create-user'] links this handler to the 'create-user' configuration.
// 'req' (request) contains information about the incoming HTTP request (body, params, query, headers).
// The second argument is the context object, providing access to 'emit' (for sending messages) and 'logger'.
export const handler: Handlers['create-user'] = async (req, { emit, logger }) => {
  // Destructure the validated request body. Zod validation happens before the handler is called.
  // If validation fails, Motia automatically sends a 400 Bad Request response.
  const { name, email } = req.body;
  
  // Use the logger for structured logging. It's good practice to log key events or data.
  logger.info('Attempting to create user with provided data', { name, email });
  
  // Business logic for creating a user would go here (e.g., database interaction).
  // For this example, we'll simulate user creation.
  import { randomUUID } from 'crypto';
const userId = randomUUID(); // Simulate a new user ID

  // Emit an event to a topic. This can trigger other steps in the workflow.
  await emit({
    // 'topic' must be one of the topics listed in config.emits.
    topic: 'user.created',
    // 'data' is the payload of the event message.
    data: { id: userId, name, email, timestamp: new Date().toISOString() }
  });
  
  logger.info('User created event emitted successfully', { userId });

  // Return a response object for the HTTP request.
  return {
    // 'status' is the HTTP status code. 201 Created is appropriate for a successful POST request.
    status: 201,
    // 'body' is the JSON response body sent back to the client.
    body: { message: 'User created successfully', userId }
  };
};
```

## Common API Patterns

### GET Endpoint
```typescript
// Configuration for a GET API endpoint to fetch users.
export const configGetUsers: ApiRouteConfig = {
  type: 'api',
  name: 'get-users',
  path: '/users', // Standard path for retrieving a collection of resources.
  method: 'GET',  // HTTP GET method for data retrieval.
  emits: ['users.fetched'], // Topic to emit to after fetching users.
  flows: ['user-management'] // Associates with the user management flow.
  // No bodySchema needed for GET requests typically, but queryParamsSchema can be used for query parameters.
};

// Handler for the GET /users endpoint.
export const handlerGetUsers: Handlers['get-users'] = async (req, { emit, logger }) => {
  // In a real application, you would fetch users from a database or another service.
  // req.queryParams can be used to access query string parameters (e.g., /users?limit=10).
  logger.info('Fetching list of users', { queryParams: req.queryParams });
  const users = [
    { id: '1', name: 'John Doe', email: 'john.doe@example.com' },
    { id: '2', name: 'Jane Smith', email: 'jane.smith@example.com' }
  ]; // Example data.

  // Emit an event with the fetched users.
  await emit({
    topic: 'users.fetched',
    data: { users, count: users.length }
  });
  
  // Return the users in the response body with a 200 OK status.
  return {
    status: 200,
    body: { users }
  };
};
```

### API with Path Parameters
```typescript
// Configuration for a GET API endpoint that uses a path parameter to fetch a specific user.
export const configGetUserById: ApiRouteConfig = {
  type: 'api',
  name: 'get-user-by-id',
  path: '/users/:id', // ':id' defines a path parameter named 'id'.
  method: 'GET',
  emits: ['user.retrieved'], // Topic for when a single user is retrieved.
  flows: ['user-management']
  // pathParamsSchema can be defined here using Zod if specific validation for path params is needed,
  // e.g., pathParamsSchema: z.object({ id: z.string().uuid("User ID must be a UUID") })
};

// Handler for the GET /users/:id endpoint.
export const handlerGetUserById: Handlers['get-user-by-id'] = async (req, { emit, logger }) => {
  // Access path parameters from req.pathParams.
  // If pathParamsSchema was defined, 'id' here would be validated accordingly.
  const userId = req.pathParams.id;
  
  logger.info('Fetching user by ID', { userId });

  // Simulate fetching a user. If userId is 'notfound', simulate user not found.
  // In a real application, this would involve a database lookup.
  let user: { id: string; name: string; email: string } | undefined;
  if (userId === 'notfound') {
    user = undefined; // Simulate user not found
  } else {
    // Simulate finding the user
    user = { id: userId, name: 'John Doe', email: 'john.doe@example.com' }; 
  }

  if (!user) { 
    logger.warn('User not found with ID', { userId });
    return {
      status: 404,
      body: { message: 'User not found' }
    };
  }
  
  // Emit an event (optional, but can be useful for auditing or further processing).
  await emit({
    topic: 'user.retrieved',
    data: { user }
  });

  // Return the found user with a 200 OK status.
  return {
    status: 200,
    body: { user }
  };
};
``` 